#!/usr/bin/env groovy
pipeline {
    agent any

    parameters {
        booleanParam(name: 'deployOnly', defaultValue: false, description: 'should this job just run to deploy a version')
        string(name: 'deploymentVersion', defaultValue: 'latest', description: 'which version should be deployed')
    }

    options {
        disableConcurrentBuilds()
    }

    environment {
        SNAPSHOT_VERSION = readMavenPom().getVersion()
        LAST_COMMIT_MESSAGE = "${currentBuild.changeSets.size() == 0 ? 'update version to ' : currentBuild.changeSets[currentBuild.changeSets.size() - 1].items.length == 0 ? 'update version to ' : currentBuild.changeSets[currentBuild.changeSets.size() - 1].items[currentBuild.changeSets[currentBuild.changeSets.size() - 1].items.length - 1].msg}"
        PERFORM_RELEASE = "${env.SNAPSHOT_VERSION.contains('-SNAPSHOT') && env.BRANCH_NAME == 'main' && !env.LAST_COMMIT_MESSAGE.startsWith('update version to ')}"
        RELEASE_VERSION = "${env.SNAPSHOT_VERSION.contains('-SNAPSHOT') ? env.SNAPSHOT_VERSION.substring(0, env.SNAPSHOT_VERSION.lastIndexOf('-SNAPSHOT')) : SNAPSHOT_VERSION}"
        VERSION = "${env.BRANCH_NAME == 'main' && !env.LAST_COMMIT_MESSAGE.startsWith('update version to ') ? env.RELEASE_VERSION : env.SNAPSHOT_VERSION}"
        STAGE = "${env.BRANCH_NAME == 'main' ? 'prod' : 'test'}"
        DEPLOYMENT_VERSION = "${params.deploymentVersion != 'latest' ? params.deploymentVersion : env.VERSION}"
    }

    triggers {
        pollSCM("* * * * *")
        GenericTrigger(
            genericRequestVariables: [
                [key: 'stage', regexpFilter: ''],
                [key: 'deployOnly', regexpFilter: ''],
                [key: 'deploymentVersion', regexpFilter: '']
            ],

            causeString: 'Triggered by web hook',

            token: 'customer-service',

            printContributedVariables: true,
            printPostContent: true,

            silentResponse: false,

            regexpFilterText: '$stage',
            regexpFilterExpression: ".*${(env.BRANCH_NAME == 'main' ? 'prod' : 'test')}.*"
        )
    }

    stages {
        stage ('Compile') {
            when {
                anyOf {
                    not {
                        branch 'main'
                    }
                    environment name: 'PERFORM_RELEASE', value: 'true'
                }
                expression {
                    params.deployOnly == false
                }
            }
            steps {
                echo "Building version ${env.VERSION}"
                script {
                    if (env.PERFORM_RELEASE.equals('true') && !env.RELEASE_VERSION.equals(env.SNAPSHOT_VERSION)) {
                        sh "mvn versions:set -DnewVersion=${env.RELEASE_VERSION} -B"
                        sh "sed -i 's/${env.SNAPSHOT_VERSION}/${env.RELEASE_VERSION}/g' deployment/overlays/prod/kustomization.yaml"
                    } else {
                        sh "sed -i 's/${env.SNAPSHOT_VERSION}/${env.GIT_COMMIT}/g' deployment/overlays/test/kustomization.yaml"
                    }
                }
                sh 'mvn clean test-compile -B'
            }
        }
        stage ('Test') {
            when {
                anyOf {
                    not {
                        branch 'main'
                    }
                    environment name: 'PERFORM_RELEASE', value: 'true'
                }
                expression {
                    params.deployOnly == false
                }
            }
            steps {
                sh "mvn test -DpactBroker.url=http://pact-service:8080 -Dpact.verifier.publishResults=true -B"
            }
        }
        stage ('Upload pacts') {
            when {
                anyOf {
                    not {
                        branch 'main'
                    }
                    environment name: 'PERFORM_RELEASE', value: 'true'
                }
                expression {
                    params.deployOnly == false
                }
            }
            steps {
                sh "mvn pact:publish -DpactBroker.url=http://pact-service:8080 -Dpact.consumer.tags=pending-${env.STAGE} -B"
            }
        }
        stage ('Package') {
            when {
                anyOf {
                    not {
                        branch 'main'
                    }
                    environment name: 'PERFORM_RELEASE', value: 'true'
                }
                expression {
                    params.deployOnly == false
                }
            }
            steps {
                sh 'mvn package -DskipTests -B'
                sh 'docker build -t customer .'
            }
        }
        stage ('Push') {
            when {
                anyOf {
                    not {
                        branch 'main'
                    }
                    environment name: 'PERFORM_RELEASE', value: 'true'
                }
                expression {
                    params.deployOnly == false
                }
            }
            steps {
                sh """
                    docker tag customer localhost:30010/customer:${env.VERSION}
                    docker tag customer localhost:30010/customer:${env.BRANCH_NAME == 'main' ? 'stable' : 'latest'}
                    docker tag customer localhost:30010/customer:${env.GIT_COMMIT}
                    docker push localhost:30010/customer:${env.VERSION}
                    docker push localhost:30010/customer:${env.BRANCH_NAME == 'main' ? 'stable' : 'latest'}
                    docker push localhost:30010/customer:${env.GIT_COMMIT}
                """
                script {
                    if (env.PERFORM_RELEASE.equals('true') && !env.RELEASE_VERSION.equals(env.SNAPSHOT_VERSION)) {
                        sh 'git config --global user.name "Jenkins"'
                        sh 'git config --global user.email "ci@openknowledge.de"'
                        sh "mvn scm:checkin -Dmessage='release of version ${env.RELEASE_VERSION}' -B"
                        sh "mvn scm:tag -Dtag=${env.RELEASE_VERSION} -B"
                        int nextRevision = Integer.parseInt(env.RELEASE_VERSION.substring(env.RELEASE_VERSION.lastIndexOf(".") + 1)) + 1
                        nextVersion = RELEASE_VERSION.substring(0, env.RELEASE_VERSION.lastIndexOf(".")) + "." + nextRevision + "-SNAPSHOT"
                        sh "sed -i 's/${env.RELEASE_VERSION}/${nextVersion}/g' deployment/overlays/prod/kustomization.yaml"
                        sh "mvn versions:set scm:checkin -DnewVersion=${nextVersion} -Dmessage='update version to ${nextVersion}' -B"
                    }
                }
            }
        }
        stage ('Deploy') {
            when {
                expression {
                    script {
                        def deploy = sh script: "pact-broker can-i-deploy --pacticipant customer-service --version ${env.DEPLOYMENT_VERSION} --to ${env.STAGE} --broker-base-url pact-service:8080", returnStatus: true
                        return deploy == 0
                    }
                }
                anyOf {
                    not {
                        branch 'main'
                    }
                    environment name: 'PERFORM_RELEASE', value: 'true'
                    expression {
                        params.deployOnly == true
                    }
                }
            }
            steps {
                script {
                    if (env.PERFORM_RELEASE.equals('true') && !env.RELEASE_VERSION.equals(env.SNAPSHOT_VERSION)) {
                        sh "mvn scm:checkout -DscmVersion=${env.RELEASE_VERSION} -DscmVersionType=tag -B"
                        sh 'kubectl apply -k deployment/overlays/prod'
                    } else {
                        sh 'kubectl apply -k deployment/overlays/test'
                        sh "sed -i 's/${env.GIT_COMMIT}/${env.SNAPSHOT_VERSION}/g' deployment/overlays/test/kustomization.yaml"
                    }
                    sh "curl -H 'Content-Type: application/json' -X PUT http://pact-service:8080/pacticipants/customer-service/versions/${env.VERSION}/tags/${env.STAGE}"
                    sh "curl -X DELETE http://pact-service:8080/pacticipants/customer-service/versions/${env.VERSION}/tags/pending-${env.STAGE}"
                }
            }
        }
    }
}

